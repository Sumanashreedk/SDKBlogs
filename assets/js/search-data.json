{
  
    
        "post0": {
            "title": "Recognizing Handwritten Digits",
            "content": "Introduction . Recognizing handwritten text is a problem that can be traced back to the first automatic machines that needed to recognize individual characters in handwritten documents. Think about, for example, the ZIP codes on letters at the post office and the automation needed to recognize these five digits. Perfect recognition of these codes is necessary in order to sort mail automatically and efficiently. . Included among the other applications that may come to mind is OCR (Optical Character Recognition) software. OCR software must read handwritten text, or pages of printed books, for general electronic documents in which each character is well defined. But the problem of handwriting recognition goes farther back in time, more precisely to the early 20th Century (1920s), when Emanuel Goldberg (1881–1970) began his studies regarding this issue and suggested that a statistical approach would be an optimal choice. . To address this issue in Python, the scikit-learn library provides a good example to better understand this technique, the issues involved, and the possibility of making predictions. . Let&#39;s first import the required Libraries. . from sklearn import datasets from sklearn.model_selection import train_test_split from sklearn.ensemble import RandomForestClassifier from sklearn.metrics import accuracy_score import matplotlib.pyplot as plt %matplotlib inline . Now let&#39;s import the dataset of images called digits. . digits = datasets.load_digits() . Let’s take a look at what this DESCR (description) of the dataset shows, by printing out its contents: . print(digits.DESCR) . .. _digits_dataset: Optical recognition of handwritten digits dataset -- **Data Set Characteristics:** :Number of Instances: 1797 :Number of Attributes: 64 :Attribute Information: 8x8 image of integer pixels in the range 0..16. :Missing Attribute Values: None :Creator: E. Alpaydin (alpaydin &#39;@&#39; boun.edu.tr) :Date: July; 1998 This is a copy of the test set of the UCI ML hand-written digits datasets https://archive.ics.uci.edu/ml/datasets/Optical+Recognition+of+Handwritten+Digits The data set contains images of hand-written digits: 10 classes where each class refers to a digit. Preprocessing programs made available by NIST were used to extract normalized bitmaps of handwritten digits from a preprinted form. From a total of 43 people, 30 contributed to the training set and different 13 to the test set. 32x32 bitmaps are divided into nonoverlapping blocks of 4x4 and the number of on pixels are counted in each block. This generates an input matrix of 8x8 where each element is an integer in the range 0..16. This reduces dimensionality and gives invariance to small distortions. For info on NIST preprocessing routines, see M. D. Garris, J. L. Blue, G. T. Candela, D. L. Dimmick, J. Geist, P. J. Grother, S. A. Janet, and C. L. Wilson, NIST Form-Based Handprint Recognition System, NISTIR 5469, 1994. .. topic:: References - C. Kaynak (1995) Methods of Combining Multiple Classifiers and Their Applications to Handwritten Digit Recognition, MSc Thesis, Institute of Graduate Studies in Science and Engineering, Bogazici University. - E. Alpaydin, C. Kaynak (1998) Cascading Classifiers, Kybernetika. - Ken Tang and Ponnuthurai N. Suganthan and Xi Yao and A. Kai Qin. Linear dimensionalityreduction using relevance weighted LDA. School of Electrical and Electronic Engineering Nanyang Technological University. 2005. - Claudio Gentile. A New Approximate Maximal Margin Classification Algorithm. NIPS. 2000. . Images attribute of the dataset stores 8*8 arrays of grayscale values for each image. Attribute shape is used get the shape of an object. . digits.images[1], digits.images[1].shape . (array([[ 0., 0., 0., 12., 13., 5., 0., 0.], [ 0., 0., 0., 11., 16., 9., 0., 0.], [ 0., 0., 3., 15., 16., 6., 0., 0.], [ 0., 7., 15., 16., 16., 2., 0., 0.], [ 0., 0., 1., 16., 16., 3., 0., 0.], [ 0., 0., 1., 16., 16., 6., 0., 0.], [ 0., 0., 1., 16., 16., 6., 0., 0.], [ 0., 0., 0., 11., 16., 10., 0., 0.]]), (8, 8)) . Let&#39;s use the function imshow() to display the data as an image. . plt.imshow(digits.images[1], cmap=plt.cm.gray_r, interpolation=&#39;nearest&#39;) . &lt;matplotlib.image.AxesImage at 0x7f1876ba5900&gt; . Target attribute of the dataset stores the digit each image represents. . digits.target . array([0, 1, 2, ..., 8, 9, 8]) . Now,let&#39;s check the number of images present in the dataset using the attribute size. . digits.target.size . 1797 . digits.images.shape, digits.target.shape . ((1797, 8, 8), (1797,)) . N, H, W = digits.images.shape N, H, W . (1797, 8, 8) . Inputs to the model should be of shape No. of samples * No. of features. . So our digits inputs should be reshaped from 1797 * 8 * 8 to 1797 * 64. . digits.images = digits.images.reshape(N, (H * W)) digits.images.shape . (1797, 64) . case 1 : Now,we&#39;ll split the data into 80% train and 20% test subsets using train_test_split() function. . train_X, val_X, train_y, val_y = train_test_split(digits.images, digits.target, test_size=0.2) train_X.shape, val_X.shape, train_y.shape, val_y.shape . ((1437, 64), (360, 64), (1437,), (360,)) . Let&#39;s create the RF model and fit the model to train the data and we&#39;ll predict on train and valid data using the trained model. Then finally with the help of the function accuracy_score() we&#39;ll check &quot;how accurate our model is!&quot; . model = RandomForestClassifier(random_state=0) # fit model to train data model.fit(train_X, train_y) # predict on train data using trained model train_pred = model.predict(train_X) # predict on valid data using trained model val_pred = model.predict(val_X) # print accuracy scores for both train and valid data print(f&quot;Train accuracy: {accuracy_score(train_y, train_pred)}&quot;) print(f&quot;Valid accuracy: {accuracy_score(val_y, val_pred)}&quot;) . Train accuracy: 1.0 Valid accuracy: 0.975 . case 2 : Now,we&#39;ll split the data into 70% train and 30% test subsets and then calculate the accuracy of the created model. . train_X, val_X, train_y, val_y = train_test_split(digits.images, digits.target, test_size=0.3) train_X.shape, val_X.shape, train_y.shape, val_y.shape . ((1257, 64), (540, 64), (1257,), (540,)) . model = RandomForestClassifier(random_state=0) # fit model to train data model.fit(train_X, train_y) # predict on train data using trained model train_pred = model.predict(train_X) # predict on valid data using trained model val_pred = model.predict(val_X) # print accuracy scores for both train and valid data print(f&quot;Train accuracy: {accuracy_score(train_y, train_pred)}&quot;) print(f&quot;Valid accuracy: {accuracy_score(val_y, val_pred)}&quot;) . Train accuracy: 1.0 Valid accuracy: 0.9722222222222222 . case 3 : Next,split the data into 60% train and 40% test subsets and then calculate the accuracy of the created model. . train_X, val_X, train_y, val_y = train_test_split(digits.images, digits.target, test_size=0.4) train_X.shape, val_X.shape, train_y.shape, val_y.shape . ((1078, 64), (719, 64), (1078,), (719,)) . model = RandomForestClassifier(random_state=0) # fit model to train data model.fit(train_X, train_y) # predict on train data using trained model train_pred = model.predict(train_X) # predict on valid data using trained model val_pred = model.predict(val_X) # print accuracy scores for both train and valid data print(f&quot;Train accuracy: {accuracy_score(train_y, train_pred)}&quot;) print(f&quot;Valid accuracy: {accuracy_score(val_y, val_pred)}&quot;) . Train accuracy: 1.0 Valid accuracy: 0.972183588317107 . Conclusion . From the code above, we can see that, &quot; In all the 3 cases the accuracy of our model is greater than 95% &quot;. This means that it predicts the digit accurately greater than 95% of the times. &quot; Hence the tested Hypothesis is accepted.....&quot; . &quot;I am thankful to mentors at https://internship.suvenconsultants.com for providing awesome problem statements and giving many of us a Coding Internship Exprience. Thank you www.suvenconsultants.com&quot; .",
            "url": "https://sumanashreedk.github.io/SDKBlogs/dataanalysis/2022/09/08/Recognizing-Handwritten-Digits.html",
            "relUrl": "/dataanalysis/2022/09/08/Recognizing-Handwritten-Digits.html",
            "date": " • Sep 8, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Meterological Data Analysis",
            "content": "A null hypothesis to be considered is : “Ho : Has the Apparent temperature and humidity compared monthly across 10 years of the data indicate an increase due to Global warming”. . The Ho means we need to find whether the average Apparent temperature for the month of a month say April starting from 2006 to 2016 and the average humidity for the same period have increased or not. . Everytime a new jupyter notebook instance is opened,it requires the following command to be run to increase autocomplete speed . %config Completer.use_jedi = False . Let&#39;s first import the required Libraries. . import pandas as pd import seaborn as sns from pathlib import Path import matplotlib.pyplot as plt #set seaborn plotting aesthetics as default sns.set() . Create path which points to project folder . project_path = Path.cwd().parent project_path . PosixPath(&#39;/mnt/d/workspace/suma/_Internship/Project_1_md&#39;) . Let&#39;s store the path of the file to be read in the variable data_path . data_path = project_path/&quot;data&quot;/&quot;weatherHistory.csv&quot; data_path . PosixPath(&#39;/mnt/d/workspace/suma/_Internship/Project_1_md/data/weatherHistory.csv&#39;) . Now,we load the dataset using the pd.read_csv command and we use head() function to display the top few rows of the dataset. . df = pd.read_csv(data_path) df.head(2) . Formatted Date Summary Precip Type Temperature (C) Apparent Temperature (C) Humidity Wind Speed (km/h) Wind Bearing (degrees) Visibility (km) Pressure (millibars) Daily Summary . 0 2006-04-01 00:00:00.000 +0200 | Partly Cloudy | rain | 9.472222 | 7.388889 | 0.89 | 14.1197 | 251 | 15.8263 | 1015.13 | Partly cloudy throughout the day. | . 1 2006-04-01 01:00:00.000 +0200 | Partly Cloudy | rain | 9.355556 | 7.227778 | 0.86 | 14.2646 | 259 | 15.8263 | 1015.63 | Partly cloudy throughout the day. | . We use tail() function to display the last few rows of the dataset . df.tail(2) . Formatted Date Summary Precip Type Temperature (C) Apparent Temperature (C) Humidity Wind Speed (km/h) Wind Bearing (degrees) Visibility (km) Pressure (millibars) Daily Summary . 96451 2016-09-09 22:00:00.000 +0200 | Partly Cloudy | rain | 21.522222 | 21.522222 | 0.60 | 10.5294 | 20 | 16.1000 | 1015.95 | Partly cloudy starting in the morning. | . 96452 2016-09-09 23:00:00.000 +0200 | Partly Cloudy | rain | 20.438889 | 20.438889 | 0.61 | 5.8765 | 39 | 15.5204 | 1016.16 | Partly cloudy starting in the morning. | . Let&#39;s change the Formatted Date from String to Datetime . df[&#39;Formatted Date&#39;] = pd.to_datetime(df[&#39;Formatted Date&#39;], utc=True) df[&#39;Formatted Date&#39;][0] . Timestamp(&#39;2006-03-31 22:00:00+0000&#39;, tz=&#39;UTC&#39;) . Now we&#39;ll sort the data by date using the function sort_values . df = df.sort_values(by = &#39;Formatted Date&#39;) df.head(2) . Formatted Date Summary Precip Type Temperature (C) Apparent Temperature (C) Humidity Wind Speed (km/h) Wind Bearing (degrees) Visibility (km) Pressure (millibars) Daily Summary . 2880 2005-12-31 23:00:00+00:00 | Partly Cloudy | rain | 0.577778 | -4.050000 | 0.89 | 17.1143 | 140 | 9.9820 | 1016.66 | Mostly cloudy throughout the day. | . 2881 2006-01-01 00:00:00+00:00 | Mostly Cloudy | rain | 1.161111 | -3.238889 | 0.85 | 16.6152 | 139 | 9.9015 | 1016.15 | Mostly cloudy throughout the day. | . we use info() function to print the concise summary of dataframe which includes index dtype,column dtypes,non-null values and memory usage . df.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Int64Index: 96453 entries, 2880 to 89732 Data columns (total 11 columns): # Column Non-Null Count Dtype -- -- 0 Formatted Date 96453 non-null datetime64[ns, UTC] 1 Summary 96453 non-null object 2 Precip Type 95936 non-null object 3 Temperature (C) 96453 non-null float64 4 Apparent Temperature (C) 96453 non-null float64 5 Humidity 96453 non-null float64 6 Wind Speed (km/h) 96453 non-null float64 7 Wind Bearing (degrees) 96453 non-null int64 8 Visibility (km) 96453 non-null float64 9 Pressure (millibars) 96453 non-null float64 10 Daily Summary 96453 non-null object dtypes: datetime64[ns, UTC](1), float64(6), int64(1), object(3) memory usage: 8.8+ MB . Let&#39;s print the summary of the data . df.describe() . Temperature (C) Apparent Temperature (C) Humidity Wind Speed (km/h) Wind Bearing (degrees) Visibility (km) Pressure (millibars) . count 96453.000000 | 96453.000000 | 96453.000000 | 96453.000000 | 96453.000000 | 96453.000000 | 96453.000000 | . mean 11.932678 | 10.855029 | 0.734899 | 10.810640 | 187.509232 | 10.347325 | 1003.235956 | . std 9.551546 | 10.696847 | 0.195473 | 6.913571 | 107.383428 | 4.192123 | 116.969906 | . min -21.822222 | -27.716667 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | . 25% 4.688889 | 2.311111 | 0.600000 | 5.828200 | 116.000000 | 8.339800 | 1011.900000 | . 50% 12.000000 | 12.000000 | 0.780000 | 9.965900 | 180.000000 | 10.046400 | 1016.450000 | . 75% 18.838889 | 18.838889 | 0.890000 | 14.135800 | 290.000000 | 14.812000 | 1021.090000 | . max 39.905556 | 39.344444 | 1.000000 | 63.852600 | 359.000000 | 16.100000 | 1046.380000 | . Now, we will select only those columns which are of our use and leave others. . Selected columns are: &quot;Formatted Date&quot;, &quot;Apparent Temperature (C)&quot;, &quot;Humidity&quot; . features = [&quot;Formatted Date&quot;, &quot;Apparent Temperature (C)&quot;, &quot;Humidity&quot;] th = df[features] th.head() . Formatted Date Apparent Temperature (C) Humidity . 2880 2005-12-31 23:00:00+00:00 | -4.050000 | 0.89 | . 2881 2006-01-01 00:00:00+00:00 | -3.238889 | 0.85 | . 2882 2006-01-01 01:00:00+00:00 | -3.155556 | 0.82 | . 2883 2006-01-01 02:00:00+00:00 | -2.194444 | 0.82 | . 2884 2006-01-01 03:00:00+00:00 | -2.744444 | 0.86 | . Let&#39;s set the DataFrame index using the existing columns . th = th.set_index(&#39;Formatted Date&#39;) th.head() . Apparent Temperature (C) Humidity . Formatted Date . 2005-12-31 23:00:00+00:00 -4.050000 | 0.89 | . 2006-01-01 00:00:00+00:00 -3.238889 | 0.85 | . 2006-01-01 01:00:00+00:00 -3.155556 | 0.82 | . 2006-01-01 02:00:00+00:00 -2.194444 | 0.82 | . 2006-01-01 03:00:00+00:00 -2.744444 | 0.86 | . Now select the data from the year 2006 using iloc() function. . th = th.iloc[1:] th.head() . Apparent Temperature (C) Humidity . Formatted Date . 2006-01-01 00:00:00+00:00 -3.238889 | 0.85 | . 2006-01-01 01:00:00+00:00 -3.155556 | 0.82 | . 2006-01-01 02:00:00+00:00 -2.194444 | 0.82 | . 2006-01-01 03:00:00+00:00 -2.744444 | 0.86 | . 2006-01-01 04:00:00+00:00 -3.072222 | 0.85 | . Print the concise summary of the required data. . th.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; DatetimeIndex: 96452 entries, 2006-01-01 00:00:00+00:00 to 2016-12-31 22:00:00+00:00 Data columns (total 2 columns): # Column Non-Null Count Dtype -- -- 0 Apparent Temperature (C) 96452 non-null float64 1 Humidity 96452 non-null float64 dtypes: float64(2) memory usage: 2.2 MB . Now we&#39;ll print the summary of the dataset &#39;th&#39; . th.describe() . Apparent Temperature (C) Humidity . count 96452.000000 | 96452.000000 | . mean 10.855183 | 0.734897 | . std 10.696795 | 0.195473 | . min -27.716667 | 0.000000 | . 25% 2.311111 | 0.600000 | . 50% 12.000000 | 0.780000 | . 75% 18.838889 | 0.890000 | . max 39.344444 | 1.000000 | . Let&#39;s plot the line graph for the data . sns.lineplot(data=th); . Resample(&#39;M&#39;) simply converting the hourly data to monthly by taking the mean. . montly_th = th.resample(&#39;M&#39;).mean() montly_th.head() . Apparent Temperature (C) Humidity . Formatted Date . 2006-01-31 00:00:00+00:00 -4.173708 | 0.834610 | . 2006-02-28 00:00:00+00:00 -2.990716 | 0.843467 | . 2006-03-31 00:00:00+00:00 1.969780 | 0.778737 | . 2006-04-30 00:00:00+00:00 12.098827 | 0.728625 | . 2006-05-31 00:00:00+00:00 15.539479 | 0.721801 | . It gives the concise summary for the monthly data. . montly_th.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; DatetimeIndex: 132 entries, 2006-01-31 00:00:00+00:00 to 2016-12-31 00:00:00+00:00 Freq: M Data columns (total 2 columns): # Column Non-Null Count Dtype -- -- 0 Apparent Temperature (C) 132 non-null float64 1 Humidity 132 non-null float64 dtypes: float64(2) memory usage: 3.1 KB . It&#39;s time to visualize our data using some outstanding libraries called matplotlib and seaborn. . Now,have avlook at the variation of &#39;Apparent Temperature&#39; and &#39;Humidity&#39; over time. . fig, axes = plt.subplots(1, 2, figsize= (20, 7)) #create boxplot in each subplot sns.lineplot(data=montly_th, x=&#39;Formatted Date&#39;, y=&#39;Apparent Temperature (C)&#39;, ax=axes[0]) sns.lineplot(data=montly_th, x=&#39;Formatted Date&#39;, y=&#39;Humidity&#39;, ax=axes[1]) plt.show() . Now we&#39;ll retrieve the data of the particular month from every year. . month_idx = 3# March montly_th_march = montly_th[montly_th.index.month == month_idx] montly_th_march . Apparent Temperature (C) Humidity . Formatted Date . 2006-03-31 00:00:00+00:00 1.969780 | 0.778737 | . 2007-03-31 00:00:00+00:00 7.174619 | 0.713884 | . 2008-03-31 00:00:00+00:00 5.004353 | 0.668468 | . 2009-03-31 00:00:00+00:00 4.280585 | 0.696680 | . 2010-03-31 00:00:00+00:00 4.589038 | 0.670161 | . 2011-03-31 00:00:00+00:00 4.589785 | 0.782970 | . 2012-03-31 00:00:00+00:00 6.591502 | 0.535941 | . 2013-03-31 00:00:00+00:00 1.957445 | 0.809946 | . 2014-03-31 00:00:00+00:00 8.408303 | 0.640403 | . 2015-03-31 00:00:00+00:00 5.441592 | 0.669476 | . 2016-03-31 00:00:00+00:00 5.901404 | 0.764677 | . Now, let&#39;s plot the graph of temperature with humidity for the particular month. . plt.figure(figsize=(15, 5)) plt.plot(montly_th_march, marker=&#39;o&#39;, label=[&#39;Apparent Temperature (C)&#39;,&#39;Humidity&#39;] ); plt.legend(loc = &#39;center right&#39;, fontsize = 10) plt.title(&#39;Relation between temperature and humidity for the month of March&#39;) plt.show() . From the above graph it is clear that for the year 2007,there is a sudden increase in the temperature and again it falls after 2007 and reaches the minimum in the year 2013.Temperature reaches maximum in the year 2014 and this is the maximum temperature of march. . Conclusion . Our environment is highly affected by Global Warming. From our analysis it&#39;s been a clear observation that their is sudden increase in temperature and sudden decrease in temperature over ten years. But, in case of humidity, it is seen that it neither rise of fall instead stayed same over 10 years. . &quot;I am thankful to mentors at https://internship.suvenconsultants.com for providing awesome problem statements and giving many of us a Coding Internship Exprience. Thank you www.suvenconsultants.com&quot; .",
            "url": "https://sumanashreedk.github.io/SDKBlogs/dataanalysis/2022/09/08/Meterological-Data-Analysis.html",
            "relUrl": "/dataanalysis/2022/09/08/Meterological-Data-Analysis.html",
            "date": " • Sep 8, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://sumanashreedk.github.io/SDKBlogs/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://sumanashreedk.github.io/SDKBlogs/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://sumanashreedk.github.io/SDKBlogs/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://sumanashreedk.github.io/SDKBlogs/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}